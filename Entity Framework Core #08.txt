EF Core'da İlişkisel Yapılar

using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;

Console.WriteLine("a");

#region Relationships(İlişkiler) Terimleri

#region Principal Entity(Asıl Entity)
//Kendi başına var olabilen tabloyu modelleyen entity'e denir. Departmanlar tablosunu modelleyen 'Departman' entity'sidir.
#endregion

#region Dependent Entity (Bağımlı Entity)
//Kendi başına var olamayan, bir başka tabloya ilişkisel olarak bağımlı olan tabloyu modelleyen entity'e denir.
//Çalışanlar tablosunu modelleyen 'Calisan' entity'sidir.
#endregion

#region Foreign Key
//Principle Entity ile Dependent Entity arasındaki ilişkiyi sağlayan key'dir.
//Dependent Entity'de tanımlanır.
//Principal Entity'deki Principal Key'i tutar.
//Calisanlar'daki DepartmanId, Departmanlar'daki Id'ye karşılık geliyor.
#endregion

#region Principal Key
//Principal Entity'deki id'nin kendisidir. Principal Entity'nin kimliği olan kolonu ifade eden property'dir.
#endregion

#region Navigation Property Nedir?
//İlişkisel tablolar arasındaki fiziksel erişimi entity class'ları üzerinden sağlayan property'lerdir.
//Bir propert'nin navigation property olabilmesi için kesinlikle entity türünden olması gerekiyor.
class Calisan //Dependent Entity
{
    public int Id { get; set; }
    public string CalisanAdi { get; set; }
    public int DepartmanId { get; set; } //ForeignKey'e karşılık geliyor.
    public Departman Departman { get; set; } //Calisan entity'si açısından Departman'lara olan Navigation Property'miz. Tekli bir ilişki var. Her bir Calisan'ın bir Departman'ı var.
}
//Burada bire çok bir ilişki var. Çalışanların 1 tane departmanı var. Departmanların birden fazla çalışanları var.
class Departman //Principal Entity
{
    public int Id { get; set; } //Principal Key
    public string DepartmanAdi { get; set; }
    public ICollection<Calisan> Calisanlar { get; set; }
    //Departman'ların birden çok çalışanı var. Yani çoklu ilişki. Bunları da bir Departman için temsil etmek istersek ICollection<Calisan> List türünde Calisan isminde bir 
    //koleksiyon oluşturuyoruz. Departman entity'si açısından Calisan'lara olan Navigation Property'miz.
}

//Navigation property'ler entity'lerdeki tanımlana göre n'e n yahut 1'en şeklinde ilişki türlerini ifade etmektedirler. İleride detaylı!
#endregion

#endregion

#region İlişki Nedir?

#region One to One
//Çalışan ile adresi arasındaki ilişki,
//Eşler arasındaki ilişki gibi.
//Yukarıda eğer Departman'da Calisan'a tekil bir navigation barındırsaydı,
/*
class Departman //Principal Entity
{
    public int Id { get; set; } //Principal Key
    public string DepartmanAdi { get; set; }
    public Calisan Calisanlar { get; set; } //ilişki birebir olacaktı.
}
*/
#endregion

#region One to Many
//Yukarıdaki örnek on to many'e örnektir. Calisan ile Departman arasındaki ilişki.
//Anne-çocuk ilişkisi gibi.
#endregion

#region Many to many
//Kardeşler arasındaki ilişki gibi. 
//Çalışanlar ile projeler arasındaki ilişki.
#endregion
#endregion

#region Entity Framework Core'da İlişki Yapılandırma Yöntemleri

#region Default Conventions
//Varsayılan entity kurallarını kullanarak yapılan ilişki yapılandırma yöntemidir.
//Yukarıda yaptığımız Id'yi otomatik tanıma, Foreign Key'i isminden tanıma vs. Entity'lerin temel kurallarını kullanıyoruz.

//Navigation Property'leri kullanarak ilişki şablonlarını çıkarmaktadır.
#endregion

#region Data Annotations Attributes
//Entity'nin niteliklerine göre ince ayarlar yapmamızı sağlayan attribute'lardır.
// [Key], [ForeignKey]
#endregion

#region FluentAPI
//Entity modellerindeki ilişkileri yapılandırırken daha detaylı çalışmamızı sağlayan öntemdir.
#endregion

#region HasOne
//İlgili entity'nin ilişkisel entity'e birebir ya da bire çok olacak şekilde ilişkisini yapılandırmaya başlayan metottur. 
#endregion

#region HasMany
//İlgili entity'nin ilişkisel entity'e çoka bir ya da çoka çok olacak ilişkisini yapılandırmaya başlayan metottur.
#endregion

#region WithOne
//HasOne ya da HasMany'den sonra birebir ya da çoka bir olacak şekilde ilişki yapılandırmasını tamamlayan metottur.
#endregion

#region WithMany
//HasOne ya da HasMany'den sonra bire çok ya da çoka çok olacak şekilde ilişki yapılandırmasını tamamlayan metottur.
#endregion

#endregion

---------------------------

EF Core'da Detaylı İlişkisel Yapılar

using Microsoft.EntityFrameworkCore;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.ConstrainedExecution;

ESirketDbContext context = new();

#region Default Convention
/*
Her iki entity'de Navigation Property ile birbirlerini tekil olarak referans ederek fiziksel bir ilişkinin olacağı ifade edilir. 

One to One ilişki türünde dependent entity'nin hangisi olduğunu default olarak belirleyebilmek pek kolay değildir. Bu durumda fiizksek olarak bir foreign key'e karşılık
property/kolon tanımlayarak çözüm getirebiliyoruz. Böylece foreign key' karşılık property tanımlayarak lüzumsuz bir kolon oluşturmuş oluyoruz.
*/
/*
class Calisan
{
    //Normal kolonlara karşılık gelen sıradan çinko karbon property'ler
    public int Id { get; set; }
    public string Adi { get; set; }

    //Eğer ilgili property'nin türü Entity'nin türünden ise Navigation property.
    public CalisanAdresi CalisanAdresi { get; set; }
}

class CalisanAdresi
{
    //CalisanAdresi'nin dependent olduğunu EF Core bildirmek istiyorsak.
    public int Id { get; set; } //bu bizim normal, primary key Id'miz.
    public int CalisanId { get; set; } //bu da bizim foreign key Id'miz olur. Artık CalisanAdresi dependent, Calisan ise Principal taraf olarak EF Core tarafından algılanacak.
    //bu default kurallar gereğidir.
    //CalisanId artık Calisanlar Tablosundaki Id ile ilişkilendirildi.
    public string Adres { get; set; }
    public Calisan Calisan { get; set; }
}
*/
#endregion

#region Data Annotations
/*
Navigation Property'ler tanımlanmalıdır.
Foreign Key kolonunun ismi default convention dışında bir kolon olacaksa eğer ForeignKey attribute'u ile bunu bildirebiliriz.
Foreign Key kolonu oluşturulmak zorunda değildir.
1'e 1 ilişkide ekstradan foreign key kolonuna ihtiyaç olmacağından olayı dependent entity'deki ıd kolonunu hem foreign hem de primary key olarak kullanmayı tercih ediyoruz.
*/
/*
class Calisan
{
    public int Id { get; set; }
    public string Adi { get; set; }

    public CalisanAdresi CalisanAdresi { get; set; }
}

class CalisanAdresi
{
    [Key, ForeignKey(nameof(Calisan))]
    public int Id { get; set; } //Id'yi hem primary key, hem de Foreign key atayarak tanımlayıp böylece index tanımlamadan unique olmuş oluyor ve 
    //ekstradan Foreign Key kolonu oluşturulmasına ihtiyaç kalmıyor. Maliyetten düşülüyor.
    //iki tablo arasındaki ilişkiyi birebir garantisine almış olduk. Calisan ve CalisanId kesinlikle aynı değere sahip olacak. Ve primary key olduğundan dolayı da unique olacaktır.

    
    //[ForeignKey(nameof(Calisan))]
    //public int Cevdet { get; set; } //CalisanAdresleri içerisindeki Cevdet, Calisanlar'daki Id ile ilişikili.
    //İsmini CalisanId'den değiştiğimiz an Data Annotations'a girmiş olduk. Fakat hala gereksiz bir kolon oluşturuluyor. Ve işe index'ler karışmış oluyor. Maliyetli!
    
    //public string Adres { get; set; }
    //public Calisan Calisan { get; set; }
}
*/
#endregion

/*
Navigation Property'ler tanımlanmalıdır.
FluentAPI yönteminde Entity'ler arasındaki ilişki  context sınıfı içerisinde OnModelCreating fonksiyonun override edilerek metotlar aracılığıyla tasarlanması gerekmektedir.
Tüm Sorumluluk bu fonksiyon içerisindeki çalışmalardadır.
*/

#region FluentAPI
class Calisan
{
    public int Id { get; set; }
    public string Adi { get; set; }

    public CalisanAdresi CalisanAdresi { get; set; }
}

class CalisanAdresi
{
    public int Id { get; set; } 
    public string Adres { get; set; }
    public Calisan Calisan { get; set; }
}
#endregion

class ESirketDbContext : DbContext
{
    public DbSet<Calisan> Calisanlar { get; set; }
    public DbSet<CalisanAdresi> CalisanAdresleri { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(@"Server=PC\SQLEXPRESS;Database=ESirketDB;User ID=sa;Password=1;TrustServerCertificate=True;Trusted_Connection=true");
    }

    //Model'ların(entity) veritabanında generate edilecek yapıları bu fonksiyonda konfigüre edilir.
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        //modelBuilder parametresi üzerinden Calisan'a gidelim. Calisan'dan HasOne ile CalisanAdresi ile birebir ilişki kuralım.
        modelBuilder.Entity<Calisan>()
            .HasOne(c => c.CalisanAdresi) //buradaki c, Calisan'ı temsil ediyor. Calisan'ın içerisindeki CalisanAdresi property'si bizim navigation property'miz.HasOne diyerek bu navigation property'nin gösterdiği tabloya birebir ilişki kur demiş olduk.
            .WithOne(c => c.Calisan) //buradaki c, CalisanAdresi'nin referansı(temsili). Bu da CalisanAdresi içerisindeki Calisan adresi ile birebir ilişki kuran np'miz.
            .HasForeignKey<CalisanAdresi>(c => c.Id); //Foreign Key yapısını tanıtıp hangi Entity'nin dependent olduğunu belirtiyoruz. CalisanAdresi içerisindeki Id'nin foreign key
                                                      //olacağını bildiriyoruz. Fakat burada Primary Key özelliği ezildi. Aşağıda;

        modelBuilder.Entity<CalisanAdresi>() //CalisanAdresi'ndeki Id'nin primary key olduğunu bildiriyoruz. Artık hem primary key hem foreign key.
            .HasKey(c => c.Id);
    }
    //işte bu API metotları üzerinden olan çalışmaya FluentAPI deiyoruz.
}

--------------------

Bire Çok İlişki Türü

using Microsoft.EntityFrameworkCore;
using System.ComponentModel.DataAnnotations.Schema;

Console.WriteLine("aaa");

#region Default Convention
/*
Default Convention yönetminde bire çok ilişkiyi kurarken foreign key kolonuna karşılık gelen bir property tanımlamak mecburiyetinde değiliz. Eğer tanımlamazsak EF Core bunu
kendisi tamamlayacak yok eğer tanımlarsak, tanımladığımızı baz alacaktır.
*/
/*
class Calisan //Dependent Entity
{
    public int Id { get; set; }
    public string Adi { get; set; }
    //public int DepartmanId { get; set; } yazılmış gibi SQL tarafında kendisi bir DepartmanId kolonu oluşturulacaktır.
    public Departman Departman { get; set; }    
}

class Departman
{
    public int Id { get; set; }
    public int DepartmanAdi { get; set;}

    public ICollection<Calisan> Calisanlar { get; set; }
}
*/
#endregion

#region Data Annonations
/*
Default Convention yönteminde foreign key kolonuna karşılık gelen property'i tanımladığmızda bu property ismi temel geleneksel entity tanımlama kurallarına uymuyorsa eğer
Data Annotations'lar ile müdahelede bulunabiliriz.
*/
/*
class Calisan //Dependent Entity
{
    public int Id { get; set; }

    [ForeignKey(nameof(Departman))]
    public int DId { get; set; }
    public string Adi { get; set; }
    public Departman Departman { get; set; }
}

class Departman
{
    public int Id { get; set; }
    public int DepartmanAdi { get; set; }

    public ICollection<Calisan> Calisanlar { get; set; }
}
*/
#endregion

#region FluentAPI
class Calisan //Dependent Entity
{
    public int Id { get; set; }
    public int DId { get; set; }
    public string Adi { get; set; }
    public Departman Departman { get; set; }
}

class Departman
{
    public int Id { get; set; }
    public int DepartmanAdi { get; set; }
    public ICollection<Calisan> Calisanlar { get; set; }
}
#endregion
class ESirketDbContext : DbContext
{
    public DbSet<Calisan> Calisanlar { get; set; }
    public DbSet<Departman> Departmanlar { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(@"Server=PC\SQLEXPRESS;Database=ESirketDB;User ID=sa;Password=1;TrustServerCertificate=True;Trusted_Connection=true");
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        /* Bu şekilde kendisi otomatik bir DepartmanId foreign key kolonu oluşturacaktır.
        modelBuilder.Entity<Calisan>()
            .HasOne(c => c.Departman)
            .WithMany(d => d.Calisanlar);
        */
        //farklı isimde bir kolon oluşturmak istersek
        modelBuilder.Entity<Calisan>()
            .HasOne(c => c.Departman)
            .WithMany(d => d.Calisanlar)
            .HasForeignKey(e => e.DId);
    }
}

--------------------------

Çoka Çok İlişki Türü

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Security.Cryptography;

Console.WriteLine("aaa");

#region Default Convention
/*
İki entity arasındaki ilişkiyi Navigation property'ler üzerinden çoğul (ICollection ya da List vs.) olarak kurmalıyız.
Default Convention'da Cross Table'ı manuel oluşturmak zorunda değiliz. EF Core tasarıma uygun bir şekilde cross table'ı kendisi otomatik basacak ve generate edecektir.
Ve oluşturulan cross table'ın içerisinde composite primary key'i de otomatik oluşturmuş olacaktır.

class Kitap
{
    public int Id { get; set; }
    public string KitapAdi { get; set; }
    public ICollection<Yazar> Yazarlar { get; set; }
}

class Yazar
{
    public int Id { get; set; }
    public int YazarAdi { get; set; }
    public ICollection<Kitap> Kitaplar { get; set; }
}
*/
#endregion

#region Data Annotations
/*
//Cross table manuel olarak oluşturulmak zorundadır.
//Entity'leri oluşturduğumuz cross table entity'si ile bire çok bir ilişki kurulmalıdır.
//Cross table'da composite primary key'i data annotations(Attributes'lar) ile manuel kuramıyoruz. Bunun için de Fluent API'da çalışma yapmamız gerekiyor.
//Cross table'a karşılık bir entity modeli oluşturuyorsak eğer bunu Context sınıfı içerisinde DbSet property'si olarak bildirmek mecburiyetinde değiliz.

class Kitap
{
    public int Id { get; set; }
    public string KitapAdi { get; set; }
    public ICollection<KitapYazar> Yazarlar { get; set; }
}

class KitapYazar
{      
    --------------
    Composite primary key oluşturabilmek için iki tane [Key] yazmamıza Data Annotations'ları kullanırken izin yok. FLuentAPI'ya uğramak zorundayız.
    [Key]
    public int KitapId { get; set; }
    [Key]
    public int YazarId { get; set; }   
    --------------
    
    Eğer ki KId ve YId olarak isimlendirme kuralları dışında çalışsaydık, yine KId ve YId'yi primary key olarak OnModelCreating'de atardı. Fakat
    Foreign Key olarak atamaz, onların yerin oromatik olarak KitapId ve YazarId oluşturur onları foreign key atardı. Bunu düzeltmek için

    [ForeignKey(nameof(Kitap))] //şeklinde tasarlamamız gerekirdi.
    public int KId { get; set; }
    [ForeignKey(nameof(Yazar))]
    public int YId { get; set; }
    public Kitap Kitap { get; set; }
    public Yazar Yazar { get; set; }
    --------------
    
    public int KitapId { get; set; }
    public int YazarId { get; set; }
    public Kitap Kitap { get; set; }
    public Yazar Yazar { get; set; }   
}

class Yazar
{
    public int Id { get; set; }
    public int YazarAdi { get; set; }
    public ICollection<KitapYazar> Kitaplar { get; set; }
}
class EKitapDbContext : DbContext
{
    public DbSet<Kitap> Kitaplar { get; set; }
    public DbSet<Yazar> Yazarlar { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(@"Server=PC\SQLEXPRESS;Database=EKitapDB;User ID=sa;Password=1;TrustServerCertificate=True;Trusted_Connection=true");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        //hem KitapId hem YazarId'ye primary key verebilmek için new ile bir anonim tür oluşturduk. HasKey ile de manuel bir şekilde primary key olarak atadık.
        //Ayrıca temel isimlendirme kuralları gereği EF Core KitapId ve YazarId'yi foreign key olarak da atayacaktır.
        modelBuilder.Entity<KitapYazar>()
            .HasKey(ky => new { ky.KitapId, ky.YazarId });
    }
}
*/
#endregion

#region FluentAPI
//Cross table manuel oluşturulmalıdır.
//DbSet olarak eklenmesine lüzum yoktur.
//Composite Primary Key HasKey metodu ile kurulmalı.
class Kitap
{
    public int Id { get; set; }
    public string KitapAdi { get; set; }
    public ICollection<KitapYazar> Yazarlar { get; set; }
}

//Cross Table
class KitapYazar
{      
    public int KitapId { get; set; }
    public int YazarId { get; set; }
    public Kitap Kitap { get; set; }
    public Yazar Yazar { get; set; }
}

class Yazar
{
    public int Id { get; set; }
    public int YazarAdi { get; set; }
    public ICollection<KitapYazar> Kitaplar { get; set; }
}
class EKitapDbContext : DbContext
{
    public DbSet<Kitap> Kitaplar { get; set; }
    public DbSet<Yazar> Yazarlar { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(@"Server=PC\SQLEXPRESS;Database=EKitapDB;User ID=sa;Password=1;TrustServerCertificate=True;Trusted_Connection=true");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<KitapYazar>()
            .HasKey(ky => new { ky.KitapId, ky.YazarId });

        modelBuilder.Entity<KitapYazar>()
            .HasOne(ky => ky.Kitap)
            .WithMany(k => k.Yazarlar)
            .HasForeignKey(ky => ky.KitapId);

        modelBuilder.Entity<KitapYazar>()
            .HasOne(ky => ky.Yazar)
            .WithMany(k => k.Kitaplar)
            .HasForeignKey(ky => ky.YazarId);
    }
}
#endregion
